import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.utils import to_categorical

# Load MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Normalize pixel values (0–255 → 0–1)
x_train = x_train / 255.0
x_test = x_test / 255.0

# One-hot encode labels (0–9 → 10 classes)
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

model = Sequential([
    Flatten(input_shape=(28, 28)),          # Flatten 28x28 images into 784
    Dense(128, activation='relu'),          # Hidden layer with 128 neurons
    Dense(64, activation='relu'),           # Hidden layer with 64 neurons
    Dense(10, activation='softmax')         # Output layer (10 classes)
])

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(x_train, y_train,
                    epochs=10,
                    batch_size=128,
                    validation_data=(x_test, y_test))

test_loss, test_acc = model.evaluate(x_test, y_test, verbose=0)
print(f"Test Accuracy: {test_acc*100:.2f}%")

import numpy as np

# Pick one sample from test set
sample = x_test[0].reshape(1, 28, 28)
prediction = model.predict(sample)

print("Predicted Digit:", np.argmax(prediction))

